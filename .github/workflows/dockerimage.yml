name: Docker Build/Publish Image

on:
  push:
    branches: [ master ]

env:
  ALPINE_PLATFORM: "arm32v7"
  DOCKER_TARGET_IMAGE: "tdmproject/alpine-python"
  DOCKER_TARGET_PLATFORM: "linux/arm/v7"

jobs:
  buildx:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        alpine_release: ["3.10", "3.13"]
        python_version: ["3.7", "3.8"]
        exclude:
          # There's no Python 3.7 for Alpine 3.13
          - alpine_release: "3.13"
            python_version: "3.7"
          # Exclude Python 3.8 for Alpine 3.10
          - alpine_release: "3.10"
            python_version: "3.8"
    steps:
    -
      name: Checkout the code
      uses: actions/checkout@v2
    -
      name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    -
      name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
    -
      name: Prepare
      id: prepare
      run: |
        echo ::set-output name=docker_platform::${DOCKER_TARGET_PLATFORM}
        echo ::set-output name=docker_image_name::${{ env.DOCKER_TARGET_IMAGE }}-$(echo ${{ matrix.python_version }} | cut -f 1 -d '.')
        echo ::set-output name=docker_image_tag::${{ env.ALPINE_PLATFORM }}-${{ matrix.alpine_release }}-${{ matrix.python_version }}
    -
      name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USER }}
        password: ${{ secrets.DOCKER_HUB_PWD }}
    -
      name: Build
      run: |
        curl -L https://github.com/multiarch/qemu-user-static/releases/download/v4.1.0-1/qemu-arm-static.tar.gz | tar zxvf -
        chmod +x qemu-arm-static

        docker buildx build \
        --build-arg PLATFORM=${{ env.ALPINE_PLATFORM }} \
        --build-arg ALPINE_RELEASE=${{ matrix.alpine_release }} \
        --build-arg PYTHON_VERSION=${{ matrix.python_version }} \
        -t ${{ steps.prepare.outputs.docker_image_name }}:${{ steps.prepare.outputs.docker_image_tag }} \
        -t ${{ steps.prepare.outputs.docker_image_name }}:${{ env.ALPINE_PLATFORM }}-${{ matrix.alpine_release }} \
        --platform ${{ steps.prepare.outputs.docker_platform }} \
        -f docker/Dockerfile --output type=registry .
